Develop a fully production-ready Progressive Web App (PWA) for FixitQuick, an Urban Company-inspired service and parts marketplace that connects users with verified service providers (categories: Electrician, Plumber, Cleaner, Laundry & Dry Cleaning, Carpentry, Pest Control) and parts providers (hardware items like bulbs, taps, wires, tools). The app supports 150+ granular sub-services (e.g., Fan Ceiling Repair at ₹60 with AI-generated icon) and parts ordering, featuring real-time tracking, secure payments, AI personalization, and comprehensive support flows. Use TypeScript for all code to ensure type safety, scalability, and error prevention. UI Theme: Immaculately neat and clean design with **white (#FFFFFF) background for a fresh, uncluttered look, black (#000000) text for crisp readability, and purple (#800080) borders/shadows on cards, buttons, and accents (e.g., 1px solid purple borders with subtle, optimized glow on hover via Framer Motion for visual appeal without clutter—ensure all elements have consistent 8px padding, 4px rounded corners, and 60fps smoothness). Prioritize full optimization and smoothness: Lazy loading for all images/components (React.lazy + Suspense with purple-bordered skeletons), image compression (sharp.js in backend to <200KB), code splitting for fast loads (<2s initial, <1s subsequent via Vercel Edge), and 60fps animations (Framer Motion with spring physics for natural bounce, throttled to avoid jank). Incorporate Framer Motion for seamless page transitions, card flips, button ripples, and slide-ins (e.g., cart sidebar emerges with a gentle 300ms purple-glow slide from left, optimized for low CPU via useReducedMotion hook); Lottie for micro-animations like loading spinners (e.g., a lightweight purple wrench turning at 30fps); and Rive for interactive icons (e.g., fan blade spinning on tap, rendered at 60fps with minimal bundle size). Authentication via Twilio for OTP/SMS verification (fast, secure phone-based login with purple-bordered input) and Google Auth for social sign-in (one-tap with Framer Motion fade). Build 4 fully interconnected interfaces (User/Customer, Admin, Service Provider, Parts Provider) as a unified PWA ecosystem, sharing a robust backend.
On browser launch, display an install app popup (via PWA manifest with purple-themed icons and a Framer Motion confetti burst on install confirmation, optimized for instant render). Begin with an animated splash screen (white background fading in over 2-3 seconds at 60fps, FixitQuick logo centered with a subtle purple border glow and gentle spin via Framer Motion, transitioning to login/home with a smooth dissolve effect—no lag via preloaded assets).
The app must be 100% functional and real-world ready: Implement comprehensive RESTful APIs using Node.js/Express backend for every feature, with Firebase as the core for real-time database (Firestore for syncing orders, users, services, parts across interfaces), authentication (role-based: 'user', 'admin', 'service_provider', 'parts_provider'), and storage (for photos, Aadhaar uploads, part images, optimized with Firebase's CDN for fast delivery). Use Axios/Fetch in frontend for API calls, with automatic token refresh via JWT (Firebase-generated) and offline queuing (localStorage + retry on reconnect). Razorpay/Stripe integration for payments: Support UPI, cards, COD; generate QR codes post-service completion (user scans to pay directly to company account via optimized QR renderer); auto-split funds (20-25% company commission configurable in admin, remainder credited to provider/parts seller's wallet with atomic Firestore transactions). WhatsApp Business API for automated notifications (e.g., order alerts with "Reply ACCEPT/REJECT" prompts, webhooks for replies to trigger assignments, optimized for low-latency via Express middleware). Google Maps API for location services (right-side fixed panel showing current address with purple border, geofencing for provider proximity, lazy-loaded map for smoothness). Leverage DeepSeek v3.1 via OpenRouter API (key: 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) for all AI needs: Real-time Hinglish/English search suggestions (e.g., "fan thik krwana hai bulb change" → JSON with relevant services/parts and icons, debounced for efficiency), auto-generated 2D cartoon icons/descriptions (prompt: "Generate a simple 2D cartoon icon for [service/part name] in white background with black outlines and purple accents, output SVG code optimized for 24x24px"), bundle suggestions, fraud detection, legal content drafting, and performance tips. Example OpenRouter fetch call in TypeScript (with error retry logic for smoothness):
const aiResponse = await fetch("https://openrouter.ai/api/v1/chat/completions", {
  method: "POST",
  headers: {
    "Authorization": "Bearer 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",
    "HTTP-Referer": "https://fixitquick.com",
    "X-Title": "FixitQuick",
    "Content-Type": "application/json",
  },
  body: JSON.stringify({
    model: "deepseek/deepseek-chat-v3.1:free",
    messages: [{ role: "user", content: "Generate service suggestions for 'fan thik krwana hai' in Hinglish JSON with purple-themed icons" }],
  }),
});
if (!aiResponse.ok) throw new Error('AI fetch failed'); // Retry with exponential backoff
const data = await aiResponse.json();
PWA Essentials: Offline caching with Workbox (cache APIs, services, parts, icons for up to 50 items with SW precache, optimized for 1MB limit), push notifications via FCM (e.g., order updates with purple-accented banners, opt-in with user consent), and install prompt ("Install FixitQuick for offline fixes!" with Framer Motion purple particle effects, throttled for performance). Bottom Navigation Bar: Persistent across interfaces (Home, Services/Parts, Orders, Wallet, Account) with purple-bordered icons and Framer Motion slide-up animation on tab switch (optimized with useTransition for non-blocking renders). Wallet Functionality: Real-time balance display (white card with purple border, updated via Firestore listener), transaction history (paginated table with lazy loading), top-up via Razorpay (with Lottie progress, sandbox-tested), deductions for orders (auto-triggered on completion with atomic updates), and provider withdrawals (Friday batch or instant +1% fee via Razorpay Payouts, with smooth confirmation toast). Payment Gateway: Full Razorpay integration (create order intent with optimized signature verification, verify webhook signatures, generate QR for COD/post-service with scannable SVG, handle splits with Firestore transactions for atomicity—no race conditions). UI Optimization: Neat and clean throughout—minimalist spacing (Tailwind: p-2 m-1), semantic HTML for SEO/accessibility, code splitting (React.lazy for heavy components like maps), and performance monitoring (console.time for key renders, Lighthouse score >95). Host frontend on Vercel/Netlify (with Edge caching for APIs), backend on Render/Heroku (with auto-scaling). Generate the entire codebase in Replit (React + TypeScript frontend, Node.js backend) as a one-shot buildable project: Structured folders (src/components for reusable UI like CartIcon with memoization, src/pages for routes like Home.tsx with lazy loading, src/api for Axios wrappers with retry logic, backend/routes for API endpoints with versioning /v1, backend/models for TypeScript interfaces like Order.ts with Zod validation, backend/controllers for DeepSeek calls with caching). Use Tailwind CSS for mobile-first responsiveness (breakpoints for 320px-1920px, optimized purge for <100KB CSS). Ensure full interconnection: Firestore real-time listeners (e.g., order accept in provider interface instantly updates user/admin via onSnapshot with batched writes), API-driven CRUD (e.g., admin adds service → Firestore syncs to user catalog with optimistic UI updates), and webhooks for external sync (e.g., WhatsApp reply → order assignment with idempotency keys). No placeholders—use sandbox keys for testing (e.g., Razorpay test mode, Firebase emulators). Include comprehensive error handling (global React boundary with purple-bordered retry toasts, Sentry integration for logging), rate limiting (Express middleware, 100 reqs/min with Redis), backups (daily Firestore exports to GCS via cron), and Jest/Cypress/axe-core tests (80% coverage, accessibility audits).
Core UI/UX Structure (All Interfaces)
Design for a neat, clean, fully optimized, and smooth experience—every screen loads in <1s with lazy-loaded components, animations are buttery-smooth at 60fps (throttled via requestAnimationFrame), and interactions feel responsive (haptic-like Framer Motion feedback without jank). White canvas provides breathing room, black text ensures legibility (16px base font, line-height 1.5), purple borders add elegance without clutter (subtle 0.5px shadows for depth).
Global Layout:
Header: Fixed top bar (white with 2px purple shadow, height 60px)—Logo (left, clickable to home, purple-bordered SVG, 32px). AI Search Bar (center, 70% width, black placeholder "Search services or parts in Hinglish/English...", debounce 300ms for DeepSeek queries, purple-bordered input with auto-suggest dropdown showing 5 results as white cards with black text and purple icons, optimized with virtual scrolling for long lists).
Left Top Corner: Cart Icon (fixed 40px, Framer Motion bounce on new item with useSpring for smooth physics, purple border with badge count in black circle; long-press shows quick cart preview with slide-down animation).
Right Side Fixed Panel: Location Panel (vertical, purple-bordered, 250px wide on desktop/100% on mobile)—Google Maps mini-embed (lazy-loaded iframe, current address pin with purple marker, optimized for low data via static snapshot fallback), edit button (Framer Motion ripple on tap, opens modal for address input via Google Places Autocomplete with purple-bordered results).
Explore All Services/Parts Panel: Below search, horizontal scrollable carousel (2 cards per line on mobile, 4 on desktop, Snap Carousel with Framer Motion momentum)—Each card: Category name (black bold 18px text), AI-generated 2D cartoon icon (white/black/purple via DeepSeek, Rive for subtle hover animation like a pulsing tool at 30fps), "Explore" button (purple-bordered, Framer Motion glow on hover with scale 1.05, optimized for touch).
Category/Sub-Category Flow: Tap category (e.g., Electrician) → Full-screen view with white background, purple header back button (Framer Motion slide). Top: Sub-categories grid (3 icons per line, e.g., Switch/Socket with purple-bordered AI icon, Fan Wiring, Wall/Ceiling Lighting, MCB, Book Now, Cancellation—icons generated via /api/generate-icon, Rive spin on tap with 60fps render). Below: Infinite-scroll list of sub-services/parts (admin-added from Firestore, lazy-loaded rows)—Each item: White card with purple border (p-4 m-2), black text name/price/rating (stars as black SVG icons), left side photo upload/preview (drag-drop zone with Lottie upload animation, Storage upload with progress bar via Framer Motion fill), Add to Cart button (-/+/quantity spinner, Framer Motion scale on increment with purple border). Right side: View Details button → Framer Motion slide-up popup (purple-bordered modal with white interior, optimized with portal for no scroll lock): Detailed process steps (animated stepper bar filling purple at 60fps), ratings/reviews section (5-star black icons, text input for new review with purple submit button, submit via POST /api/ratings/add), related add-ons (checkboxes with purple ticks, DeepSeek-suggested via POST /api/cart/suggest-addons).
Bottom Navigation Bar: Fixed bottom (white with purple shadow, 60px height)—Icons for Home (dashboard with quick AI-suggested actions via DeepSeek card), Services/Parts (catalog toggle with Framer Motion fade), Orders (history with status badges, lazy-loaded list), Wallet (balance overview with Chart.js mini-graph), Account (profile/settings with toggle switches). Framer Motion slide-up on tab change (optimized with useTransition for non-blocking renders).
Animations & Accessibility: All transitions smooth (300ms ease-in-out via Framer Motion, throttled for performance). Lottie for loaders (lightweight JSON files <10KB, purple accents). Rive for icons (bundled <5KB per icon, 60fps with fallback to SVG). Fully optimized: Lazy load heavy elements (maps, charts), compress images (sharp.js backend), code splitting (dynamic imports). WCAG 2.1 AA compliant: ARIA labels on all interactive elements (e.g., "Cart icon with 3 items, press to view"), high-contrast mode toggle (purple to #4B0082, black text to #FFFFFF), reduced motion option (disables animations via CSS media query), voice-over support (semantic HTML, screen reader announces "Service: Fan Repair, ₹60, 4.5 stars" with axe-core tests in CI). Accessibility testing: Integrate axe-core for automated scans, manual checklist (keyboard navigation, contrast ≥4.5:1).
PWA Specifics: Manifest.json (name: "FixitQuick", theme_color: "#800080", icons in purple variants, optimized for iOS/Android homescreen). Service worker (Workbox) caches APIs/services/parts/icons (up to 50 items with SW precache, 1MB limit, stale-while-revalidate for freshness). Install popup: Triggered on first visit ("Add FixitQuick to home screen for offline bookings!" with Framer Motion purple particle effects, throttled for 60fps).
1. User Interface (Customer-Facing)
Focus on effortless, optimized discovery and booking—AI makes searches conversational (e.g., typing "tap leak ho raha hai" instantly suggests "Tap Replacement ₹49" with purple drip icon, debounced for no lag).
Header & Search: As above—DeepSeek-powered search (POST /api/v1/search {query: string, filters: {price: string, urgency: string, rating: number, proximity: number}} → returns filtered JSON with 10-20 suggestions, including bundles like "Tap Replacement + Leak Fix for ₹90, save ₹10" with combined icons, optimized with virtual scrolling). Filters as purple-bordered chips below bar (Framer Motion slide-in on search focus, touch-optimized).
Services/Parts Catalog: Dynamic load from Firestore (GET /api/v1/services?category=electrician&filters=..., GET /api/v1/parts/all?filter=bulbs). Each item: White card with purple border (optimized shadow via CSS box-shadow), black text name/price/rating (stars as black SVG icons, lazy-loaded). Infinite scroll (pull-to-refresh with Lottie spinner, IntersectionObserver for rows).
Cart Flow: Uber-like sidebar (left slide-in via Framer Motion, purple border, 300ms duration)—List items with qty spinners, subtotal ticker (black text, animated count-up), AI bundle suggestions (POST /api/v1/cart/suggest-bundles {cartItems: array} → DeepSeek prompt for combos, e.g., "Fan Repair + Bulb = Full Fix Bundle ₹80", shown as purple-bordered cards). Apply coupons (GET /api/v1/coupons/active, POST /api/v1/cart/apply-coupon {code: string} → discount preview with Lottie coin drop). Proceed: Address confirmation (Google Maps, POST /api/v1/location/update {address: string}), slot picker (GET /api/v1/slots?serviceId=123 → calendar with purple highlights, Framer Motion day flip at 60fps). Payment: POST /api/v1/orders/place {cart: array, address: string, slot: Date, paymentMethod: 'online'|'cod'} → Razorpay intent (online: redirect with loading overlay; COD: OTP confirm with purple input). Confirmation: Lottie purple success animation + shareable receipt (GET /api/v1/share/order/{id} → meta tags for social preview, optimized image preview).
Cancellation/Rescheduling Flow: In Orders tab, swipe-to-cancel pre-acceptance (POST /api/v1/orders/{id}/cancel {reason: string} → Firestore update, full refund to wallet with Lottie undo animation). Post-acceptance: Request button (POST /api/v1/orders/{id}/request-cancel {reason: string} → notify provider/admin via FCM/WhatsApp, purple-bordered reason dropdown modal). Reschedule: "Reschedule" button (purple-bordered, Framer Motion tap) → Modal with slot picker (GET /api/v1/slots) and address update (POST /api/v1/location/update), notify provider (POST /api/v1/notification/send {type: 'reschedule'}).
Orders Page: Vertical list (GET /api/v1/orders/user/{uid}?status=pending → real-time Firestore listener, optimized with batched updates). Each order: White card with purple border, status badge (black text on purple pill), Google Maps tracking embed (lazy-loaded, provider ETA with Rive pulsing dot at 60fps), chat button (opens Firebase room via POST /api/v1/chat/init {orderId}). Post-complete: Auto-QR popup (POST /api/v1/orders/{id}/complete → Razorpay QR scan to company account, Framer Motion QR enlarge with haptic bounce). Returns for parts (POST /api/v1/parts/orders/{id}/return {reason: string, photos: File[]} → notify parts provider).
Wallet Tab: White dashboard card (purple border) showing balance (black bold 24px text, real-time Firestore listener), transaction history table (GET /api/v1/wallet/transactions/{uid}?filter=month → sortable, lazy-loaded rows with purple row highlights). Top-up button (POST /api/v1/wallet/topup {amount: number} → Razorpay popup with Lottie progress, sandbox-tested). Loyalty: FixiPoints display (earn 1 per ₹50, GET /api/v1/wallet/points/{uid}), redeem modal (POST /api/v1/wallet/redeem-points {points: number, for: 'discount'} → apply to cart with purple confetti). Withdrawals viewable (but restricted to providers).
Parts Shop Tab: Toggle within Services—Browse (GET /api/v1/parts/all?filter=electrical → grid with photos, stock badges in purple, lazy-loaded). Order flow mirrors services (add to cart, POST /api/v1/parts/order {partIds: array, address: string} → delivery ETA from Shiprocket, optimized tracking map). Promotions: Purple-bordered “Deal” badges (Framer Motion pulse, from POST /api/v1/parts/promotions/active).
In-App Support: Support button (Account tab, purple-bordered, Framer Motion pulse) → Modal with options: FAQ (GET /api/v1/content/faq → Markdown-rendered list with purple accordions), Live Chat (WebSocket /api/v1/support/ws → connect to agent or DeepSeek bot: "Answer user query: [text]" with purple typing dot animation), or ticket submission (POST /api/v1/support/ticket {issue: string, orderId?: string} → Firestore, notify admin with Lottie ticket fly-in).
Additional Features:
Guest Mode: Browse without login (localStorage cart), prompt login at checkout (Framer Motion slide-up modal with purple border). Sync on signup (POST /api/v1/sync-guest {cart: array}).
Onboarding Tutorial: First login: Interactive spotlight (Framer Motion on UI elements, e.g., "Tap search for AI suggestions")—Steps for user (search, cart, checkout), provider (category, verification). Skippable with purple "Skip" button (PUT /api/v1/profile/tutorial {completed: true}).
Emergency SOS: Red floating button (top-right, purple shadow)—POST /api/v1/emergency/order {issue: string, location: coords} → DeepSeek prioritize ("Match emergency [issue] to nearest provider"), +30% surcharge, 15-min guarantee with Lottie alert flash.
Offline Mode: Workbox caches 50 items; queue orders (localStorage, sync via POST /api/v1/sync-offline on reconnect with Framer Motion progress bar, 60fps update).
Multi-Language: i18next (English/Hindi/Bhojpuri)—Auto-detect (navigator.language), switcher in Account (purple-bordered dropdown). Dynamic translate (POST /api/v1/translate {text: string, lang: 'hi'} → DeepSeek).
Push Notifications: Opt-in modal on login (POST /api/v1/notifications/subscribe {fcmToken: string, preferences: object}). Manage in Account (PUT /api/v1/profile/notifications {enabled: boolean}). Purple-bordered toggle with Framer Motion slide.
Error Handling: Global React error boundary—API fails show purple-bordered toast ("Retry connection?" with button re-calling API, exponential backoff). Offline indicator (top purple bar: "Back online—syncing orders", auto-fade).
Legal & Compliance Pages: Footer links (purple-bordered buttons)—Terms/Privacy/Refund (GET /api/v1/content/legal?type=terms → Markdown-rendered white page with black text, purple headings). Admin editable (POST /api/v1/admin/content/legal {type: 'privacy', content: string}). DeepSeek draft (POST /api/v1/content/generate-legal → "Generate GDPR-compliant privacy policy for service app").
Performance Optimization: Lazy load images (IntersectionObserver, sharp.js compression in POST /api/v1/upload/image → <200KB), code splitting (dynamic imports for maps/charts), Redis caching (5-min TTL for GET /api/v1/services), Lighthouse >95 score (optimized bundle <1MB).
2. Service Provider Interface
Optimized for efficiency, with real-time updates ensuring providers feel in control (e.g., order accept instantly reflects in user app via Firestore, no lag with batched writes).
Login & Onboarding: Twilio OTP/Google (role check). Splash to "Choose Category" carousel (Framer Motion swipe, purple-bordered cards). AI sub-services (POST /api/v1/onboard/services?category=electrician → DeepSeek: "List 20 detailed sub-services for Electrician with prices ₹30-150, JSON format")—Checkbox select (white list with purple checks, lazy-loaded). Custom add (text input, auto-gen icon). End: Verification upload (POST /api/v1/verification/upload {aadharFile: File, photoFile: File} → Storage, DeepSeek OCR: "Extract name/DOB from Aadhaar image, output JSON").
Dashboard: Pending orders feed (GET /api/v1/orders/pending?category=electrician&sort=priority → Firestore listener, white cards with purple borders, emergency highlighted with purple SOS badge and Lottie flash). Priority queue (POST /api/v1/orders/prioritize → DeepSeek rank by urgency/proximity/payout). Swipe accept/reject (Framer Motion slide—green for accept, red for reject, 60fps). Schedule tool: Calendar (PUT /api/v1/profile/{uid}/availability {slots: array} → purple-highlighted available slots, lazy-loaded months). AI suggestions (POST /api/v1/schedule/suggest {orders: array} → DeepSeek optimize). Status toggle (PUT /api/v1/profile/{uid}/status {available: boolean} → block assignments).
Orders Management: Active/completed tabs (GET /api/v1/orders/provider/{uid}?status=active, optimized pagination). Start service (POST /api/v1/orders/{id}/start {checkinPhoto: File} → upload to Storage with compression, notify user via FCM with Lottie check-in animation). Complete (POST /api/v1/orders/{id}/complete {completionPhoto: File} → generate QR, trigger user payment with Framer Motion QR enlarge). Report issues (POST /api/v1/orders/{id}/report {issue: string, evidence: File} → admin queue, purple-bordered modal with dropdown reasons and photo preview).
Profile Management: Edit services (PUT /api/v1/profile/{uid}/update {services: array}), view ratings (GET /api/v1/ratings/provider/{uid} → average stars, review snippets in black text on white cards with purple highlights). Portfolio gallery (POST /api/v1/portfolio/add {photos: File[]} → grid with purple borders, lazy-loaded). Performance metrics tab (GET /api/v1/profile/{uid}/metrics → {completionRate: number, avgRating: number, ordersCompleted: number}, purple-bordered cards with Chart.js graphs at 60fps). DeepSeek tips (POST /api/v1/tips/provider {metric: string} → "Suggest ways to improve [metric], 3 bullet points").
Earnings & Wallet: Dedicated tab (GET /api/v1/earnings/{uid}?period=week → purple-bordered graph via Chart.js, optimized canvas). Withdraw button (POST /api/v1/withdraw {amount: number, method: 'friday'|'instant'} → Razorpay Payouts, +1% instant fee shown in preview with Lottie coin flow).
Additional Features: Free cap verification (admin approval sends physical cap; user scans QR via POST /api/v1/verify/cap {qrCode: string} → confirm "Verified Provider" badge with purple glow). Community forum (GET /api/v1/forum/threads?category=electrician → threaded view with lazy-loaded replies, POST /api/v1/forum/posts/add {threadId: string, content: string} → purple-bordered input with real-time preview). In-app support for providers (similar to user, /api/v1/support/ws for agent chat).
3. Parts Provider Interface
Optimized for inventory and sales, with bulk tools and real-time stock sync for smoothness.
Login & Onboarding: Twilio OTP/Google (role: 'parts_provider'). Category select (e.g., Hardware), AI parts list (POST /api/v1/onboard/parts?category=hardware → DeepSeek: "List 50 hardware parts with prices ₹10-500, stock levels, JSON"). Select/add custom (POST /api/v1/onboard/select-parts {parts: [{name, price, stock}]}). Verification: Business docs/photo (POST /api/v1/verification/upload-parts {docs: File[], photo: File} → Storage, DeepSeek validation: "Validate business docs for legitimacy").
Dashboard: Inventory overview (GET /api/v1/parts/my-inventory/{uid} → stock levels, low-stock alerts via FCM with purple notification badge). Pending orders feed (GET /api/v1/parts/orders/pending/{uid} → Firestore listener, white cards with purple borders, accept/ship buttons with Framer Motion ripple).
Parts Management: Add single (POST /api/v1/parts/add {name: string, price: number, stock: number, photos: File[], description: string} → DeepSeek icon gen, Storage upload with compression). Bulk upload (POST /api/v1/parts/bulk-upload {csvFile: File} → parse CSV, loop DeepSeek for icons, batch insert to Firestore with progress bar via Framer Motion). Edit stock (PUT /api/v1/parts/{id}/stock {quantity: number} → real-time sync to user catalog, optimistic UI update). View listings (grid with purple borders, search filter, lazy-loaded photos).
Orders Management: Accept (POST /api/v1/parts/orders/{id}/accept), ship (POST /api/v1/parts/orders/{id}/ship {trackingId: string via Shiprocket API} → update status with Lottie truck animation). Tracking updates (PUT /api/v1/parts/orders/{id}/status {status: 'shipped'|'delivered', eta: Date} → Firestore listener notifies user with map refresh). Returns tab (GET /api/v1/parts/orders/returns/{uid} → list with evidence photos, POST /api/v1/parts/orders/{id}/return-action {action: 'approve'|'reject'} → refund via Razorpay, update stock with atomic transaction).
Promotions Tab: Create deals (POST /api/v1/parts/promotions/add {partId: string, discount: number, expiry: Date} → Firestore, sync to user catalog). Suggest deals (POST /api/v1/parts/promotions/suggest {inventory: array} → DeepSeek: "Optimize discounts for [part], suggest 3 deals"). Admin approval (POST /api/v1/admin/parts/promotions/approve/{id} → notify via WhatsApp).
Earnings & Wallet: Similar to service provider (GET /api/v1/earnings/parts/{uid}, POST /api/v1/withdraw). Buyer chat (POST /api/v1/chat/init {orderId}).
Additional Features: Stock alerts (low threshold FCM push with purple banner). Admin approval for custom parts (queue in admin, POST /api/v1/admin/parts-approve/{id} → notify via WhatsApp). In-app support for parts providers ( /api/v1/support/ws).
4. Admin Interface
A powerful, optimized control center with real-time dashboards, bulk tools, and audit trails for full oversight—smooth scrolling tables, lazy-loaded graphs for performance.
Login: Google Auth (role: 'admin' via Firebase custom claims).
Dashboard: Overview cards (GET /api/v1/analytics/dashboard → users count, revenue graph via Chart.js on white canvas with purple lines, orders pie chart, lazy-loaded at 60fps). Real-time sections: Pending verifications (services/parts), disputes, low-stock alerts (Firestore listeners with Framer Motion update animations). Behavior analytics sub-tab (GET /api/v1/admin/analytics/behavior → {topSearches: string[], cartAbandonmentRate: number, popularCategories: string[]}, purple-bordered Chart.js heatmaps). DeepSeek insights (POST /api/v1/admin/analytics/insights {data: object} → "Interpret search patterns: [data], suggest improvements").
User/Provider/Parts Provider Management: Searchable lists (GET /api/v1/admin/users/all?role=provider&search=john → paginated table with purple row borders, lazy-loaded rows). Edit/delete (PUT /api/v1/admin/users/{id} {updates: {phone, status}}, DELETE /api/v1/admin/users/{id} → cascade to orders with confirmation modal). Bulk actions (POST /api/v1/admin/bulk-action {action: 'approve'|'delete', ids: string[]} → batch Firestore updates, purple-bordered checkbox select with Lottie progress).
Verification Queue: Tab for services/parts (GET /api/v1/admin/verifications/pending?type=service → list with uploaded previews, lazy-loaded images). Approve/reject (POST /api/v1/admin/verify/{id} {status: 'approved'|'rejected', notes: string} → Firestore update, trigger /api/v1/notification/send {to: {phone, email, whatsapp}, type: 'approval'} for call/email/WhatsApp + cap dispatch note). Custom items approval (GET /api/v1/admin/custom-items/pending, POST /api/v1/admin/custom-items/approve/{id} → sync to catalogs).
Categories/Services/Parts Management: Add/edit/delete (POST /api/v1/admin/categories/add {name: string, iconPrompt: string} → DeepSeek gen icon). Services (POST /api/v1/admin/services/add {subServices: array}), Parts categories (POST /api/v1/admin/parts/categories/add {name: string}). All changes sync instantly to user catalog via Firestore with optimistic updates.
Orders Management: Full view (GET /api/v1/admin/orders/all?status=disputed → filterable table, lazy-loaded). Manual assign (POST /api/v1/admin/orders/{id}/assign {providerId or partsProviderId}), refund (POST /api/v1/admin/refund/{orderId} {amount: number, reason: string} → Razorpay refund, wallet adjustment with Lottie coin reverse). Parts returns resolution (POST /api/v1/admin/parts/return-resolve {disputeId: string} → mediate approve/reject).
Payments & Wallet Management: Transactions log (GET /api/v1/admin/transactions/all?dateRange=week → purple-highlighted table, lazy-loaded). Commission config (PUT /api/v1/admin/commission {percentage: 20} → applies to new orders). Batch payouts (POST /api/v1/admin/payouts/batch {date: 'friday', providers: []} → cron job via node-cron).
Audit Logs: Dedicated tab (GET /api/v1/admin/audit-logs?filter=verify&date=... → chronological table with action descriptions, e.g., "Admin X approved provider Y", purple timestamps, searchable). Restore from backups (POST /api/v1/admin/restore/{id} → soft-delete recovery).
Content & Promotions: FAQ/blog editor (POST /api/v1/admin/content/add {type: 'faq', content: string} → Markdown support, preview with purple syntax highlight). Coupons (POST /api/v1/admin/coupons/create {code: string, discount: number, expiry: Date} → auto-apply in cart). Legal pages (POST /api/v1/admin/content/legal {type: 'privacy', content: string}, POST /api/v1/content/generate-legal → DeepSeek draft).
Additional Features: Fraud detection (POST /api/v1/admin/fraud/scan {orderId: string} → DeepSeek: "Analyze [order details] for fraud risk, return score 0-100 and reasons"). Multi-city config (PUT /api/v1/admin/config/cities {bhagalpur: {active: true, pricingMultiplier: 1.1}} → location-based surcharges). Reports export (GET /api/v1/admin/reports/export?format=csv&type=revenue → downloadable file with purple-branded header, optimized ZIP if large). Backup management (cron daily Firestore exports to GCS, GET /api/v1/admin/backups/list → restore UI).
Backend APIs (Node.js/Express + TypeScript)
All endpoints versioned as /api/v1/ for future-proofing (redirect /api/* to /v1 with 301, changelog at GET /api/v1/changelog). Secured with Firebase JWT middleware (verifyIdToken), rate-limited (100 reqs/min per IP/user via Redis). Firestore models: TypeScript interfaces like interface Order { id: string; userId: string; status: 'pending'|'accepted'|'completed'; items: ServiceItem[]; total: number; } with Zod validation. Real-time: Firestore onCreate/onUpdate triggers (e.g., order accept → FCM to user, WhatsApp to provider). WebSockets: Socket.io for chat (/api/v1/chat/ws, /api/v1/support/ws with typing indicators). Cron: node-cron for Friday payouts, daily backups (Firebase Admin SDK to GCS). Optimizations: Redis for caching (5-min TTL for GET /api/v1/services), sharp.js for image compression in uploads.
Auth: POST /api/v1/auth/google (signInWithCredential), POST /api/v1/auth/twilio-otp {phone: string, code: string} (phoneAuth).
User APIs: GET /api/v1/services?category=...&filters=..., GET /api/v1/parts/all?filter=..., POST /api/v1/search {query: string, filters: object}, POST /api/v1/cart/add {itemId: string, qty: number}, POST /api/v1/cart/suggest-bundles {cartItems: array}, POST /api/v1/cart/apply-coupon {code: string}, POST /api/v1/orders/place {cart: array, address: string, slot: Date, paymentMethod: string}, POST /api/v1/orders/{id}/cancel {reason: string}, POST /api/v1/orders/{id}/request-cancel {reason: string}, POST /api/v1/orders/{id}/reschedule {slot: Date, address: string}, GET /api/v1/orders/user/{uid}, POST /api/v1/parts/order {partIds: array, address: string}, POST /api/v1/parts/orders/{id}/return {reason: string, photos: array}, GET /api/v1/parts/orders/tracking/{id}, GET /api/v1/wallet/{uid}, POST /api/v1/wallet/topup {amount: number}, POST /api/v1/wallet/redeem-points {points: number}, GET /api/v1/wallet/transactions/{uid}, POST /api/v1/emergency/order {issue: string}, POST /api/v1/sync-offline {queuedActions: array}, POST /api/v1/sync-guest {cart: array}, POST /api/v1/notifications/subscribe {fcmToken: string}, POST /api/v1/referral/generate {uid: string}, GET /api/v1/referrals/{code}, POST /api/v1/translate {text: string, lang: string}, POST /api/v1/pre-register {email: string, phone: string}, POST /api/v1/support/ticket {issue: string, orderId?: string}, GET /api/v1/content/faq, GET /api/v1/content/legal?type=..., PUT /api/v1/profile/tutorial {completed: boolean}.
Service Provider APIs: GET /api/v1/onboard/services?category=..., POST /api/v1/onboard/select {services: array}, POST /api/v1/verification/upload {aadharFile: File, photoFile: File}, GET /api/v1/orders/pending?category=...&sort=..., POST /api/v1/orders/prioritize {orders: array}, POST /api/v1/orders/{id}/accept, POST /api/v1/orders/{id}/reject, POST /api/v1/orders/{id}/start {checkinPhoto: File}, POST /api/v1/orders/{id}/complete {completionPhoto: File}, POST /api/v1/orders/{id}/report {issue: string}, PUT /api/v1/profile/{uid}/availability {slots: array}, POST /api/v1/schedule/suggest {orders: array}, PUT /api/v1/profile/{uid}/status {available: boolean}, GET /api/v1/profile/{uid}, PUT /api/v1/profile/update {services: array}, GET /api/v1/profile/{uid}/metrics, POST /api/v1/tips/provider {metric: string}, GET /api/v1/ratings/provider/{uid}, POST /api/v1/portfolio/add {photos: File[]}, GET /api/v1/earnings/{uid}, POST /api/v1/withdraw {amount: number, method: string}, POST /api/v1/chat/init {orderId: string}, GET /api/v1/forum/threads?category=..., POST /api/v1/forum/posts/add {threadId: string, content: string}, POST /api/v1/verify/cap {qrCode: string}.
Parts Provider APIs: GET /api/v1/onboard/parts?category=..., POST /api/v1/onboard/select-parts {parts: array}, POST /api/v1/verification/upload-parts {docs: File[], photo: File}, GET /api/v1/parts/my-inventory/{uid}, POST /api/v1/parts/add {name: string, price: number, stock: number, photos: File[], description: string}, POST /api/v1/parts/bulk-upload {csvFile: File}, PUT /api/v1/parts/{id}/stock {quantity: number}, GET /api/v1/parts/orders/pending/{uid}, POST /api/v1/parts/orders/{id}/accept, POST /api/v1/parts/orders/{id}/ship {trackingId: string}, PUT /api/v1/parts/orders/{id}/status {status: string, eta: Date}, GET /api/v1/parts/orders/returns/{uid}, POST /api/v1/parts/orders/{id}/return-action {action: string}, GET /api/v1/parts/orders/tracking/{id}, POST /api/v1/parts/promotions/add {partId: string, discount: number, expiry: Date}, POST /api/v1/parts/promotions/suggest {inventory: array}, GET /api/v1/earnings/parts/{uid}, POST /api/v1/withdraw {amount: number, method: string}, GET /api/v1/ratings/parts/{uid}.
Admin APIs: GET /api/v1/admin/users/all?role=...&search=..., POST /api/v1/admin/bulk-action {action: string, ids: array}, PUT /api/v1/admin/users/{id} {updates: object}, DELETE /api/v1/admin/users/{id}, GET /api/v1/admin/verifications/pending?type=..., POST /api/v1/admin/verify/{id} {status: string, notes: string}, GET /api/v1/admin/custom-items/pending, POST /api/v1/admin/custom-items/approve/{id}, POST /api/v1/admin/categories/add {name: string}, POST /api/v1/admin/services/add {subServices: array}, POST /api/v1/admin/parts/categories/add {name: string}, GET /api/v1/admin/orders/all?status=..., POST /api/v1/admin/orders/{id}/assign {providerId: string}, POST /api/v1/admin/refund/{orderId} {amount: number, reason: string}, POST /api/v1/admin/parts/return-resolve {disputeId: string}, GET /api/v1/admin/transactions/all?dateRange=..., PUT /api/v1/admin/commission {percentage: number}, POST /api/v1/admin/payouts/batch {date: string}, GET /api/v1/admin/audit-logs?filter=..., POST /api/v1/admin/restore/{id}, GET /api/v1/admin/analytics/dashboard, GET /api/v1/admin/analytics/behavior, POST /api/v1/admin/analytics/insights {data: object}, POST /api/v1/admin/content/add {type: string, content: string}, POST /api/v1/admin/content/legal {type: string, content: string}, POST /api/v1/admin/coupons/create {code: string, discount: number}, POST /api/v1/admin/fraud/scan {orderId: string}, PUT /api/v1/admin/config/cities {city: object}, GET /api/v1/admin/reports/export?format=...&type=..., POST /api/v1/admin/parts-approve/{id}, POST /api/v1/admin/parts/promotions/approve/{id}, GET /api/v1/changelog.
Shared APIs: POST /api/v1/generate-icon {name: string} (DeepSeek → SVG code → Storage URL with compression), POST /api/v1/whatsapp/send {phone: string, msg: string}, POST /api/v1/whatsapp/webhook {reply: string}, POST /api/v1/notification/send {to: object, type: string}, WebSocket /api/v1/chat/ws, /support/ws (Socket.io for typing/status), GET /api/v1/slots?serviceId=..., POST /api/v1/ratings/add {orderId: string, stars: number, review: string}, POST /api/v1/disputes/create {orderId: string, issue: string}, POST /api/v1/admin/refund-resolve {disputeId: string}, POST /api/v1/share/order/{id}, GET /api/v1/content/faq, POST /api/v1/content/generate-legal {type: string}, POST /api/v1/upload/image {file: File} (compression).
Workflow (End-to-End, Fully Interconnected)
User Onboarding/Booking: Splash → Guest mode/login (Twilio/Google, tutorial spotlight) → Home (DeepSeek search with filters) → Explore category → Sub-service/part select (add to cart with bundle suggest) → Cart review (apply coupon/redeem points) → Checkout/reschedule/cancel → Track → Pay QR/return → Rate/support (ticket/chat).
Order Dispatch: Order created (Firestore) → Query eligible providers/parts providers → Push to dashboards (listener) + WhatsApp → Accept (swipe/webhook) → Admin auto-approve → Assign (FCM sync, priority queue).
Execution: Provider starts/completes (QR) or parts ship (Shiprocket, returns) → Razorpay webhook → Auto-split (Firestore atomic).
Provider/Parts Onboarding: Login → Category select (DeepSeek) → Verification upload → Admin approve (bulk) → Notification/cap.
Payments/Wallet: Top-up/redeem (Razorpay), withdraw (cron), FixiPoints earn.
Admin Oversight: Real-time dashboard (behavior analytics, DeepSeek insights) → Manage (bulk actions, verifications, custom approvals) → Audit/fraud/backups.
Support: In-app chat/tickets, legal pages, pre-registration rewards.